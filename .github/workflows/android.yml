name: Android Build and Test

on:
  push:
    branches: [main, develop]
    paths:
      - "shared/**"
      - "scripts/build/**"
      - ".github/docker/android-builder.Dockerfile"
      - ".github/workflows/android.yml"
  pull_request:
    branches: [main]
    paths:
      - "shared/**"
      - "scripts/build/**"
      - ".github/docker/android-builder.Dockerfile"
      - ".github/workflows/android.yml"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  android-docker-build:
    name: Docker-based Android Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Android libraries using Docker build script
        run: |
          chmod +x scripts/build/build-android-docker.sh
          ./scripts/build/build-android-docker.sh build

      - name: Test built libraries
        run: |
          chmod +x scripts/build/test-android-integration.sh
          ./scripts/build/test-android-integration.sh

      - name: Verify library symbols
        run: |
          chmod +x scripts/build/verify-android-symbols.sh
          ./scripts/build/verify-android-symbols.sh verify

      - name: Upload Android libraries
        uses: actions/upload-artifact@v4
        with:
          name: android-libraries-${{ github.sha }}
          path: target/android/
          retention-days: 30

      - name: Create build summary
        run: |
          echo "## Android Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture | Status | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|--------|------|" >> $GITHUB_STEP_SUMMARY

          for arch in arm64-v8a armeabi-v7a; do
            lib_path="target/android/$arch/libziplock_shared.so"
            if [ -f "$lib_path" ]; then
              size=$(du -h "$lib_path" | cut -f1)
              echo "| $arch | ✅ Built | $size |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $arch | ❌ Missing | - |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY

  android-performance-test:
    name: Android Performance Test
    runs-on: ubuntu-latest
    needs: android-docker-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android libraries
        uses: actions/download-artifact@v4
        with:
          name: android-libraries-${{ github.sha }}
          path: target/android/

      - name: Run performance tests
        run: |
          chmod +x scripts/build/test-android-integration.sh
          ./scripts/build/test-android-integration.sh performance

      - name: Check library sizes
        run: |
          echo "## Library Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture | Size (bytes) | Size (MB) | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|--------------|-----------|--------|" >> $GITHUB_STEP_SUMMARY

          for arch in arm64-v8a armeabi-v7a; do
            lib_path="target/android/$arch/libziplock_shared.so"
            if [ -f "$lib_path" ]; then
              size_bytes=$(stat -c%s "$lib_path")
              size_mb=$(echo "scale=2; $size_bytes / 1024 / 1024" | bc -l)

              if [ $size_bytes -gt $((20 * 1024 * 1024)) ]; then
                status="⚠️ Large"
              elif [ $size_bytes -lt 1024 ]; then
                status="❌ Too small"
              else
                status="✅ Good"
              fi

              echo "| $arch | $size_bytes | ${size_mb} MB | $status |" >> $GITHUB_STEP_SUMMARY
            fi
          done

  android-security-check:
    name: Android Security Check
    runs-on: ubuntu-latest
    needs: android-docker-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android libraries
        uses: actions/download-artifact@v4
        with:
          name: android-libraries-${{ github.sha }}
          path: target/android/

      - name: Install security analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils file

      - name: Run security checks
        run: |
          chmod +x scripts/build/test-android-integration.sh
          ./scripts/build/test-android-integration.sh security

      - name: Check for security features
        run: |
          echo "## Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for arch in arm64-v8a armeabi-v7a; do
            lib_path="target/android/$arch/libziplock_shared.so"
            if [ -f "$lib_path" ]; then
              echo "### $arch" >> $GITHUB_STEP_SUMMARY

              # Check for stack protection
              if readelf -s "$lib_path" | grep -q "__stack_chk"; then
                echo "- ✅ Stack protection enabled" >> $GITHUB_STEP_SUMMARY
              else
                echo "- ❌ Stack protection not detected" >> $GITHUB_STEP_SUMMARY
              fi

              # Check for position independent code
              if readelf -h "$lib_path" | grep -q "DYN"; then
                echo "- ✅ Position independent executable" >> $GITHUB_STEP_SUMMARY
              else
                echo "- ❌ Not position independent" >> $GITHUB_STEP_SUMMARY
              fi

              # Check for stripped symbols
              symbol_count=$(readelf -s "$lib_path" | wc -l)
              if [ $symbol_count -lt 50 ]; then
                echo "- ✅ Symbols stripped ($symbol_count symbols)" >> $GITHUB_STEP_SUMMARY
              else
                echo "- ⚠️ Many symbols present ($symbol_count symbols)" >> $GITHUB_STEP_SUMMARY
              fi

              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

  release-android:
    name: Release Android Libraries
    runs-on: ubuntu-latest
    needs:
      [android-docker-build, android-performance-test, android-security-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android libraries
        uses: actions/download-artifact@v4
        with:
          name: android-libraries-${{ github.sha }}
          path: target/android/

      - name: Create release package
        run: |
          # Create release directory structure
          mkdir -p release/android/{arm64-v8a,armeabi-v7a}

          # Copy libraries
          for arch in arm64-v8a armeabi-v7a; do
            if [ -f "target/android/$arch/libziplock_shared.so" ]; then
              cp "target/android/$arch/libziplock_shared.so" "release/android/$arch/"
            fi
          done

          # Copy header file
          cp target/android/ziplock.h release/android/

          # Create README
          cat > release/android/README.md << 'EOF'
          # ZipLock Android Libraries

          This package contains the ZipLock shared libraries for Android development.

          ## Contents

          - `arm64-v8a/libziplock_shared.so` - ARM64 library (modern Android devices)
          - `armeabi-v7a/libziplock_shared.so` - ARMv7 library (older Android devices)
          - `ziplock.h` - C header file for FFI integration

          Note: This package focuses on real Android device architectures.
          For emulator support (x86/x86_64), build separately using the build scripts.

          ## Integration

          1. Copy the libraries to your Android project's `src/main/jniLibs/` directory
          2. Copy the header file to your native code directory
          3. Use JNI to load the library: `System.loadLibrary("ziplock_shared")`

          ## Documentation

          See the complete integration guide at:
          https://github.com/ejangi/ziplock/blob/main/docs/technical/android.md
          EOF

          # Create version info
          echo "Build: ${{ github.sha }}" > release/android/VERSION
          echo "Date: $(date -u)" >> release/android/VERSION
          echo "Branch: ${{ github.ref_name }}" >> release/android/VERSION

          # Create archive
          cd release
          tar -czf ziplock-android-${{ github.sha }}.tar.gz android/

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: ziplock-android-release-${{ github.sha }}
          path: release/ziplock-android-${{ github.sha }}.tar.gz
          retention-days: 90

      - name: Create release summary
        run: |
          echo "## Release Package Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Package:** ziplock-android-${{ github.sha }}.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Download:** Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "📝 **Documentation:** [Android Integration Guide](https://github.com/ejangi/ziplock/blob/main/docs/technical/android.md)" >> $GITHUB_STEP_SUMMARY
