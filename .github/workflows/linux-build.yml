name: Linux Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libxft-dev \
            liblzma-dev \
            pkg-config \
            libgtk-4-dev \
            libadwaita-1-dev \
            libatk1.0-dev \
            libatk-bridge2.0-dev \
            libgtk-3-dev \
            libgdk-pixbuf-2.0-dev

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings -A clippy::uninlined-format-args -A unused-imports -A dead-code -A clippy::empty-line-after-doc-comments -A clippy::single-component-path-imports -A clippy::const-is-empty -A clippy::assertions-on-constants -A clippy::needless-borrow -A clippy::too-many-arguments -A clippy::wildcard-in-or-patterns -A clippy::field-reassign-with-default -A clippy::unnecessary-map-or -A clippy::if-same-then-else -A clippy::match-like-matches-macro -A clippy::redundant-closure -A clippy::manual-map -A clippy::needless-return -A clippy::derivable-impls -A clippy::only-used-in-recursion -A clippy::manual-flatten -A clippy::needless-borrows-for-generic-args

      - name: Run tests
        run: cargo test --verbose --workspace

      - name: Run backend tests
        run: cargo test --verbose -p ziplock-backend

      - name: Run shared library tests
        run: cargo test --verbose -p ziplock-shared

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    needs: [test, security-audit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-x86_64-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libxft-dev \
            liblzma-dev \
            pkg-config \
            libgtk-4-dev \
            libadwaita-1-dev \
            libatk1.0-dev \
            libatk-bridge2.0-dev \
            libgtk-3-dev \
            libgdk-pixbuf-2.0-dev \
            dpkg-dev \
            fakeroot

      - name: Make build scripts executable
        run: |
          chmod +x scripts/build-linux.sh
          chmod +x scripts/package-deb.sh

      - name: Build binaries
        env:
          TARGET_ARCH: x86_64-unknown-linux-gnu
        run: |
          ./scripts/build-linux.sh \
            --target x86_64-unknown-linux-gnu \
            --profile release

      - name: Create Debian package
        env:
          PACKAGE_ARCH: amd64
        run: |
          ./scripts/package-deb.sh \
            --arch amd64

      - name: Test package installation
        run: |
          # Test package in Docker container
          docker run --rm -v $PWD:/workspace ubuntu:22.04 bash -c "
            cd /workspace &&
            apt-get update &&
            apt-get install -y ./target/ziplock_*_amd64.deb &&
            ziplock --version &&
            ziplock-backend --version
          "

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ziplock-linux-amd64
          path: |
            target/ziplock_*_amd64.deb
            target/x86_64-unknown-linux-gnu/release/ziplock-backend
            target/x86_64-unknown-linux-gnu/release/ziplock
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy .deb packages
          find artifacts -name "*.deb" -exec cp {} release-assets/ \;

          # Create checksums
          cd release-assets
          sha256sum *.deb > SHA256SUMS

          # List files for verification
          ls -la

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create release notes
        run: |
          cat > release-notes.md << EOF
          # ZipLock v${{ steps.version.outputs.VERSION }}

          ## 🚀 What's New

          This release includes:

          - **Linux Support**: Native Linux builds with systemd integration
          - **Debian Packages**: Easy installation via .deb packages
          - **Security**: AES-256 encryption with Argon2 key derivation
          - **Modern UI**: Clean interface built with Rust and iced

          ## 📦 Installation

          ### Ubuntu/Debian
          \`\`\`bash
          wget https://github.com/ejangi/ziplock/releases/download/v${{ steps.version.outputs.VERSION }}/ziplock_${{ steps.version.outputs.VERSION }}_amd64.deb
          sudo dpkg -i ziplock_${{ steps.version.outputs.VERSION }}_amd64.deb
          sudo apt-get install -f  # Fix any dependency issues
          \`\`\`



          ## 🔧 Usage

          After installation:
          1. Launch ZipLock from your applications menu or run \`ziplock\` in terminal
          2. The backend service will start automatically and run on boot
          3. Create your first password vault or import from another password manager

          ## 🛡️ Security

          - All sensitive operations handled by secure backend service
          - Master key never leaves your device
          - Zero-knowledge architecture
          - Automatic security audits via GitHub Actions

          ## 📋 System Requirements

          - Ubuntu 20.04+ or Debian 11+
          - X11 or Wayland display server
          - 50MB disk space
          - systemd (for backend service)

          ## 🐛 Known Issues

          - First launch may take a few seconds to initialize
          - Wayland support is experimental in this release

          ## 📝 Full Changelog

          See [CHANGELOG.md](https://github.com/ejangi/ziplock/blob/v${{ steps.version.outputs.VERSION }}/CHANGELOG.md) for detailed changes.
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "ZipLock v${{ steps.version.outputs.VERSION }}"
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          files: |
            release-assets/*.deb
            release-assets/SHA256SUMS
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to package repositories
        if: "!contains(steps.version.outputs.VERSION, '-')"
        run: |
          echo "🚀 Release v${{ steps.version.outputs.VERSION }} created successfully!"
          echo "📦 .deb packages are available for download"
          echo "🔄 Consider setting up automatic package repository deployment"

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libxft-dev \
            liblzma-dev \
            pkg-config \
            libgtk-4-dev \
            libadwaita-1-dev \
            libatk1.0-dev \
            libatk-bridge2.0-dev \
            libgtk-3-dev \
            libgdk-pixbuf-2.0-dev

      - name: Run benchmarks
        run: |
          # Run any performance benchmarks
          cargo bench --workspace || true

          # Measure binary sizes
          cargo build --release
          echo "## Binary Sizes" >> benchmark-results.md
          echo "| Binary | Size |" >> benchmark-results.md
          echo "|--------|------|" >> benchmark-results.md
          echo "| ziplock-backend | $(du -h target/release/ziplock-backend | cut -f1) |" >> benchmark-results.md
          echo "| ziplock | $(du -h target/release/ziplock | cut -f1) |" >> benchmark-results.md

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.md
          retention-days: 30
