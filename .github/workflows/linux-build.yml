name: Linux Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Install system dependencies
        uses: actions/cache@v4
        id: deps-cache
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-deps-${{ hashFiles('.github/workflows/linux-build.yml') }}

      - name: Install dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libxft-dev \
            liblzma-dev \
            libgtk-4-dev \
            libadwaita-1-dev \
            libatk1.0-dev \
            libatk-bridge2.0-dev \
            libgtk-3-dev \
            libgdk-pixbuf-2.0-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev

      - name: Verify GTK4 installation
        run: |
          if pkg-config --exists gtk4; then
            echo "✓ GTK4 found - version: $(pkg-config --modversion gtk4)"
          else
            echo "✗ GTK4 not found"
            exit 1
          fi

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: |
          cargo clippy -p ziplock-shared --all-targets -- -D warnings -A clippy::uninlined-format-args -A unused-imports -A dead-code
          cargo clippy -p ziplock-linux --no-default-features --features "iced-gui,wayland-support,file-dialog" --all-targets -- -D warnings -A clippy::uninlined-format-args -A unused-imports -A dead-code

      - name: Run tests
        run: |
          cargo test --verbose -p ziplock-shared
          cargo test --verbose -p ziplock-linux --no-default-features --features "iced-gui,wayland-support,file-dialog"

      - name: Build all binaries
        run: |
          echo "Building shared library..."
          cargo build --release --target x86_64-unknown-linux-gnu -p ziplock-shared --features c-api

          echo "Building unified application..."
          cargo build --release --target x86_64-unknown-linux-gnu -p ziplock-linux --no-default-features --features "iced-gui,wayland-support,file-dialog"

          echo "Verifying built binaries..."
          ls -la target/x86_64-unknown-linux-gnu/release/ziplock
          ls -la target/x86_64-unknown-linux-gnu/release/libziplock_shared.so

          echo "Binary dependencies check..."
          ldd target/x86_64-unknown-linux-gnu/release/ziplock | head -5
          ldd target/x86_64-unknown-linux-gnu/release/libziplock_shared.so | head -5

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-binaries
          path: |
            target/x86_64-unknown-linux-gnu/release/ziplock
            target/x86_64-unknown-linux-gnu/release/libziplock_shared.so
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: cargo-audit-${{ runner.os }}

      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit
          fi

      - name: Run security audit
        run: cargo audit

  package-debian:
    name: Create Debian Package
    runs-on: ubuntu-22.04
    needs: [test-and-build, security-audit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-binaries
          path: target/x86_64-unknown-linux-gnu/release/

      - name: Make binaries executable
        run: |
          chmod +x target/x86_64-unknown-linux-gnu/release/ziplock
          ls -la target/x86_64-unknown-linux-gnu/release/

      - name: Create Debian package
        run: |
          echo "Creating Debian package from pre-built binaries..."
          docker run --rm \
            -v $PWD:/workspace \
            ghcr.io/${{ github.repository }}/ubuntu-builder:latest \
            bash -c "
              cd /workspace
              chmod +x scripts/build/package-deb.sh
              ./scripts/build/package-deb.sh --arch amd64
            "

      - name: Test package installation
        run: |
          echo "Testing package installation in clean environment..."
          docker run --rm \
            -v $PWD:/workspace \
            ubuntu:22.04 \
            bash -c "
              cd /workspace
              apt-get update -qq
              apt-get install -y ./target/ziplock_*_amd64.deb
              dpkg -l | grep ziplock
              test -x /usr/bin/ziplock
              test -f /usr/lib/libziplock_shared.so
              echo 'Package installation test: PASSED'
            "

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: target/ziplock_*_amd64.deb
          retention-days: 30

  package-arch:
    name: Create Arch Linux Package
    runs-on: ubuntu-22.04
    needs: [test-and-build, security-audit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-binaries
          path: target/x86_64-unknown-linux-gnu/release/

      - name: Create Arch package structure
        run: |
          echo "Creating Arch source package from pre-built binaries..."
          docker run --rm \
            -v $PWD:/workspace \
            ghcr.io/${{ github.repository }}/arch-builder:latest \
            bash -c "
              sudo chown -R builder:builder /workspace
              cd /workspace
              chmod +x scripts/build/package-arch.sh
              ./scripts/build/package-arch.sh --source-only
            "

      - name: Upload Arch package
        uses: actions/upload-artifact@v4
        with:
          name: arch-package
          path: |
            target/ziplock-*.tar.gz
            packaging/arch/PKGBUILD
            packaging/arch/.SRCINFO
          retention-days: 30

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-22.04
    needs: [test-and-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-binaries
          path: target/x86_64-unknown-linux-gnu/release/

      - name: Run benchmarks
        run: |
          # Run any performance benchmarks (if they exist)
          cargo bench --workspace || echo "No benchmarks found"

          # Measure binary sizes from pre-built artifacts
          echo "## Binary Sizes" > benchmark-results.md
          echo "| Binary | Size |" >> benchmark-results.md
          echo "|--------|------|" >> benchmark-results.md
          echo "| ziplock | $(du -h target/x86_64-unknown-linux-gnu/release/ziplock | cut -f1) |" >> benchmark-results.md
          echo "| libziplock_shared.so | $(du -h target/x86_64-unknown-linux-gnu/release/libziplock_shared.so | cut -f1) |" >> benchmark-results.md

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.md
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: [package-debian, package-arch]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy Debian package
          cp artifacts/debian-package/*.deb release-assets/

          # Copy Arch package files
          cp artifacts/arch-package/*.tar.gz release-assets/
          cp artifacts/arch-package/PKGBUILD release-assets/

          # Copy compiled binaries
          mkdir -p release-assets/binaries
          cp artifacts/compiled-binaries/* release-assets/binaries/

          # Create tarball of binaries
          cd release-assets
          tar -czf ziplock-linux-x86_64.tar.gz binaries/
          rm -rf binaries

          ls -la release-assets/

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Extract changelog for version
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog section for this version
            awk "/^## \[?${{ steps.version.outputs.VERSION }}\]?/ {flag=1; next} /^## / {flag=0} flag" CHANGELOG.md > version-changelog.md
            if [ -s version-changelog.md ]; then
              echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
              cat version-changelog.md >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "CHANGELOG_CONTENT=No changelog found for this version." >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG_CONTENT=No changelog file found." >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "ZipLock v${{ steps.version.outputs.VERSION }}"
          body: |
            ## ZipLock v${{ steps.version.outputs.VERSION }}

            ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}

            ### Installation

            **Debian/Ubuntu:**
            ```bash
            wget https://github.com/ejangi/ziplock/releases/download/v${{ steps.version.outputs.VERSION }}/ziplock_${{ steps.version.outputs.VERSION }}_amd64.deb
            sudo dpkg -i ziplock_${{ steps.version.outputs.VERSION }}_amd64.deb
            sudo apt-get install -f  # Install any missing dependencies
            ```

            **Arch Linux:**
            ```bash
            yay -S ziplock
            ```

            **Manual Installation:**
            ```bash
            wget https://github.com/ejangi/ziplock/releases/download/v${{ steps.version.outputs.VERSION }}/ziplock-linux-x86_64.tar.gz
            tar -xzf ziplock-linux-x86_64.tar.gz
            sudo cp ziplock /usr/local/bin/
            sudo cp libziplock_shared.so /usr/local/lib/
            ```
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          files: |
            release-assets/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
