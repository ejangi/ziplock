name: Linux Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
        continue-on-error: true
        id: rust-install

      - name: Manual Rust installation (fallback)
        if: steps.rust-install.outcome == 'failure'
        run: |
          echo "Primary Rust installation failed, trying manual installation..."

          # Install rustup manually with retries
          for i in {1..3}; do
            echo "Attempt $i: Installing rustup..."
            if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable; then
              echo "Rustup installed successfully on attempt $i"
              break
            else
              echo "Attempt $i failed, waiting 30 seconds..."
              sleep 30
            fi
          done

          # Source the environment
          source $HOME/.cargo/env

          # Install components with retries
          for component in rustfmt clippy; do
            for i in {1..3}; do
              echo "Attempt $i: Installing $component..."
              if rustup component add $component; then
                echo "$component installed successfully on attempt $i"
                break
              else
                echo "$component installation attempt $i failed, waiting 15 seconds..."
                sleep 15
              fi
            done
          done

          # Verify installation
          rustc --version
          cargo --version
          rustfmt --version
          cargo clippy --version

      - name: Setup Rust environment for subsequent steps
        run: |
          # Ensure Rust is in PATH for all subsequent steps
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          echo "CARGO_HOME=$HOME/.cargo" >> $GITHUB_ENV
          echo "RUSTUP_HOME=$HOME/.rustup" >> $GITHUB_ENV

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libxft-dev \
            liblzma-dev \
            libgtk-4-dev \
            libadwaita-1-dev \
            libatk1.0-dev \
            libatk-bridge2.0-dev \
            libgtk-3-dev \
            libgdk-pixbuf-2.0-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev

      - name: Verify GTK4 installation
        run: |
          if pkg-config --exists gtk4; then
            echo "✓ GTK4 found - version: $(pkg-config --modversion gtk4)"
          else
            echo "✗ GTK4 not found"
            exit 1
          fi

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: |
          cargo clippy -p ziplock-shared --all-targets -- -D warnings -A clippy::uninlined-format-args -A unused-imports -A dead-code
          cargo clippy -p ziplock-linux --no-default-features --features "iced-gui,wayland-support,file-dialog" --all-targets -- -D warnings -A clippy::uninlined-format-args -A unused-imports -A dead-code

      - name: Run tests
        run: |
          cargo test --verbose -p ziplock-shared
          cargo test --verbose -p ziplock-linux --no-default-features --features "iced-gui,wayland-support,file-dialog"

      - name: Build all binaries
        run: |
          echo "Building shared library..."
          cargo build --release --target x86_64-unknown-linux-gnu -p ziplock-shared --features c-api

          echo "Building unified application..."
          cargo build --release --target x86_64-unknown-linux-gnu -p ziplock-linux --no-default-features --features "iced-gui,wayland-support,file-dialog"

          echo "Verifying built binaries..."
          ls -la target/x86_64-unknown-linux-gnu/release/ziplock
          ls -la target/x86_64-unknown-linux-gnu/release/libziplock_shared.so

          echo "Binary dependencies check..."
          ldd target/x86_64-unknown-linux-gnu/release/ziplock | head -5
          ldd target/x86_64-unknown-linux-gnu/release/libziplock_shared.so | head -5

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-binaries
          path: |
            target/x86_64-unknown-linux-gnu/release/ziplock
            target/x86_64-unknown-linux-gnu/release/libziplock_shared.so
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: cargo-audit-${{ runner.os }}

      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit
          fi

      - name: Run security audit
        run: cargo audit

  package-debian:
    name: Create Debian Package
    runs-on: ubuntu-22.04
    needs: [test-and-build, security-audit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fix Git permissions
        run: |
          # Set safe ownership for Git operations
          git config --global --add safe.directory $PWD
          # Make sure we have proper permissions for cleanup
          chmod -R u+w .git/

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-binaries
          path: target/x86_64-unknown-linux-gnu/release/

      - name: Create installation structure
        run: |
          echo "Creating installation structure for packaging..."

          # Create the directory structure expected by package-deb.sh
          mkdir -p target/install/usr/bin
          mkdir -p target/install/usr/lib
          mkdir -p target/install/etc/ziplock
          mkdir -p target/install/usr/share/applications
          mkdir -p target/install/usr/share/icons/hicolor/scalable/apps

          # Copy binaries from download location to install structure
          cp target/x86_64-unknown-linux-gnu/release/ziplock target/install/usr/bin/
          cp target/x86_64-unknown-linux-gnu/release/libziplock_shared.so target/install/usr/lib/

          # Make binaries executable
          chmod +x target/install/usr/bin/ziplock
          chmod 644 target/install/usr/lib/libziplock_shared.so

          # Create default config
          cat > target/install/etc/ziplock/config.yml << 'EOF'
          # ZipLock Configuration (Unified FFI Architecture)
          storage:
            backup_count: 3
            auto_backup: true
            compression:
              level: 6
              solid: false
              multi_threaded: true

          security:
            auto_lock_timeout: 900  # 15 minutes
            min_master_key_length: 12
            enforce_strong_master_key: true

          ui:
            theme: "auto"  # auto, light, dark
            font_size: 14
            show_password_strength: true

          logging:
            level: "info"  # debug, info, warn, error
            file: null     # null for console only, or path to log file
          EOF

          # Copy desktop file if it exists
          if [ -f "apps/linux/resources/ziplock.desktop" ]; then
            cp apps/linux/resources/ziplock.desktop target/install/usr/share/applications/
          fi

          # Copy icon if it exists
          if [ -f "apps/linux/resources/icons/ziplock.svg" ]; then
            cp apps/linux/resources/icons/ziplock.svg target/install/usr/share/icons/hicolor/scalable/apps/
          elif [ -f "assets/icons/ziplock-logo.svg" ]; then
            cp assets/icons/ziplock-logo.svg target/install/usr/share/icons/hicolor/scalable/apps/ziplock.svg
          fi

          # Verify installation structure
          echo "Installation structure created:"
          find target/install -type f | sort

      - name: Create Debian package
        run: |
          echo "Creating Debian package from installation structure..."

          # Validate prerequisites
          if [ ! -f "target/install/usr/bin/ziplock" ]; then
            echo "ERROR: Required binary not found in installation structure"
            exit 1
          fi

          if [ ! -f "target/install/usr/lib/libziplock_shared.so" ]; then
            echo "ERROR: Required shared library not found in installation structure"
            exit 1
          fi

          # Get current user and group IDs for proper permission handling
          USER_ID=$(id -u)
          GROUP_ID=$(id -g)

          # Run with proper error handling and permission management
          set -e
          docker run --rm \
            -v $PWD:/workspace \
            -e USER_ID="$USER_ID" \
            -e GROUP_ID="$GROUP_ID" \
            ghcr.io/${{ github.repository }}/ubuntu-builder:latest \
            bash -c "
              set -euo pipefail

              # Copy workspace to avoid permission issues with git
              echo 'Copying workspace to avoid git permission conflicts...'
              cp -r /workspace /tmp/build
              cd /tmp/build

              # Validate copied structure
              if [ ! -f 'target/install/usr/bin/ziplock' ]; then
                echo 'ERROR: Binary not found in copied workspace'
                exit 1
              fi

              # Run packaging
              chmod +x scripts/build/package-deb.sh
              if ! ./scripts/build/package-deb.sh --arch amd64; then
                echo 'ERROR: Debian packaging script failed'
                exit 1
              fi

              # Verify package was created
              if [ ! -f target/ziplock_*_amd64.deb ]; then
                echo 'ERROR: Debian package was not created'
                ls -la target/ || true
                exit 1
              fi

              # Copy results back to workspace with correct ownership
              echo 'Copying build results back...'
              cp target/ziplock_*_amd64.deb /workspace/target/

              # Restore original ownership
              chown -R \$USER_ID:\$GROUP_ID /workspace

              echo 'Debian package creation completed successfully'
            "

          # Final verification of build results
          echo "Verifying Debian package build results..."
          if ! ls target/ziplock_*_amd64.deb 1> /dev/null 2>&1; then
            echo "ERROR: Debian package .deb not found after build"
            echo "Contents of target directory:"
            ls -la target/ || true
            exit 1
          fi

          # Verify package integrity
          if ! dpkg-deb --info target/ziplock_*_amd64.deb > /dev/null; then
            echo "ERROR: Debian package is corrupted or invalid"
            exit 1
          fi

          echo "Debian package build completed successfully"

      - name: Restore Git permissions after Docker
        run: |
          # Restore proper ownership for Git cleanup
          sudo chown -R $(id -u):$(id -g) .git/ || true
          chmod -R u+w .git/ || true

      - name: Test package installation
        run: |
          echo "Testing package installation in clean environment..."
          docker run --rm \
            -v $PWD:/workspace \
            ubuntu:22.04 \
            bash -c "
              cd /workspace
              apt-get update -qq
              apt-get install -y ./target/ziplock_*_amd64.deb
              dpkg -l | grep ziplock
              test -x /usr/bin/ziplock
              test -f /usr/lib/libziplock_shared.so
              echo 'Package installation test: PASSED'
            "

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: target/ziplock_*_amd64.deb
          retention-days: 30

  package-arch:
    name: Create Arch Linux Package
    runs-on: ubuntu-22.04
    needs: [test-and-build, security-audit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fix Git permissions
        run: |
          # Set safe ownership for Git operations
          git config --global --add safe.directory $PWD
          # Make sure we have proper permissions for cleanup
          chmod -R u+w .git/

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-binaries
          path: target/x86_64-unknown-linux-gnu/release/

      - name: Create installation structure for Arch package
        run: |
          echo "Creating installation structure for Arch packaging..."

          # Create the directory structure (same as Debian)
          mkdir -p target/install/usr/bin
          mkdir -p target/install/usr/lib
          mkdir -p target/install/etc/ziplock
          mkdir -p target/install/usr/share/applications
          mkdir -p target/install/usr/share/icons/hicolor/scalable/apps

          # Copy binaries from download location to install structure
          cp target/x86_64-unknown-linux-gnu/release/ziplock target/install/usr/bin/
          cp target/x86_64-unknown-linux-gnu/release/libziplock_shared.so target/install/usr/lib/

          # Make binaries executable
          chmod +x target/install/usr/bin/ziplock
          chmod 644 target/install/usr/lib/libziplock_shared.so

          # Create default config
          cat > target/install/etc/ziplock/config.yml << 'EOF'
          # ZipLock Configuration (Unified FFI Architecture)
          storage:
            backup_count: 3
            auto_backup: true
            compression:
              level: 6
              solid: false
              multi_threaded: true

          security:
            auto_lock_timeout: 900  # 15 minutes
            min_master_key_length: 12
            enforce_strong_master_key: true

          ui:
            theme: "auto"  # auto, light, dark
            font_size: 14
            show_password_strength: true

          logging:
            level: "info"  # debug, info, warn, error
            file: null     # null for console only, or path to log file
          EOF

          # Copy desktop file if it exists
          if [ -f "apps/linux/resources/ziplock.desktop" ]; then
            cp apps/linux/resources/ziplock.desktop target/install/usr/share/applications/
          fi

          # Copy icon if it exists
          if [ -f "apps/linux/resources/icons/ziplock.svg" ]; then
            cp apps/linux/resources/icons/ziplock.svg target/install/usr/share/icons/hicolor/scalable/apps/
          elif [ -f "assets/icons/ziplock-logo.svg" ]; then
            cp assets/icons/ziplock-logo.svg target/install/usr/share/icons/hicolor/scalable/apps/ziplock.svg
          fi

      - name: Create Arch package structure
        run: |
          echo "Creating Arch source package from installation structure..."
          echo "DEBUG: Current workflow file timestamp:"
          stat .github/workflows/linux-build.yml
          echo "DEBUG: Git commit hash:"
          git rev-parse HEAD
          echo "DEBUG: Checking for updated printf approach in workflow..."
          if grep -q "printf.*sha256sums" .github/workflows/linux-build.yml; then
            echo "DEBUG: ✅ Found printf approach in workflow file"
          else
            echo "DEBUG: ❌ Printf approach NOT found - still using old sed command"
            echo "DEBUG: Current sha256sums update method:"
            grep -A 5 -B 5 "sha256sums" .github/workflows/linux-build.yml || echo "No sha256sums found"
          fi

          # Validate prerequisites
          if [ ! -f "target/install/usr/bin/ziplock" ]; then
            echo "ERROR: Required binary not found in installation structure"
            exit 1
          fi

          if [ ! -f "target/install/usr/lib/libziplock_shared.so" ]; then
            echo "ERROR: Required shared library not found in installation structure"
            exit 1
          fi

          # Get current user and group IDs for proper permission handling
          USER_ID=$(id -u)
          GROUP_ID=$(id -g)

          # Run with proper error handling and permission management
          set -e
          docker run --rm \
            -v $PWD:/workspace \
            -e USER_ID="$USER_ID" \
            -e GROUP_ID="$GROUP_ID" \
            ghcr.io/${{ github.repository }}/arch-builder:latest \
            bash -c "
              set -euo pipefail

              # Copy workspace to avoid permission issues with git
              echo 'Copying workspace to avoid git permission conflicts...'
              cp -r /workspace /tmp/build
              cd /tmp/build

              # Validate copied structure
              if [ ! -f 'target/install/usr/bin/ziplock' ]; then
                echo 'ERROR: Binary not found in copied workspace'
                exit 1
              fi

              # Change ownership for build process
              sudo chown -R builder:builder /tmp/build

              # Create Arch package with proper PKGBUILD and .SRCINFO
              sudo -u builder bash -c '
                set -euo pipefail
                cd /tmp/build

                echo \"DEBUG: About to execute sha256sums update commands...\"
                echo \"DEBUG: Method being used for sha256sums update:\"
                echo \"  - Using printf approach (new method)\"

                # Get version from Cargo.toml
                VERSION=\$(grep '^version' Cargo.toml | head -1 | cut -d'\"' -f2)
                echo \"Creating Arch package for version: \$VERSION\"

                # Create source archive manually (same as script but with control)
                mkdir -p target/src
                rm -rf target/src/*

                # Copy project files excluding build artifacts
                rsync -av \
                  --exclude=\".git/\" \
                  --exclude=\"target/\" \
                  --exclude=\"tests/results/\" \
                  --exclude=\"*.deb\" \
                  --exclude=\"*.pkg.tar.*\" \
                  --exclude=\".DS_Store\" \
                  ./ target/src/ziplock-\$VERSION/

                # Create source archive
                cd target/src
                tar -czf \"../ziplock-\$VERSION.tar.gz\" \"ziplock-\$VERSION/\"
                cd ../..

                # Calculate SHA256
                SHA256=\$(sha256sum \"target/ziplock-\$VERSION.tar.gz\" | cut -d' ' -f1)
                echo \"Source archive SHA256: \$SHA256\"

                # Update PKGBUILD with current version and SHA256 using script

                echo \"DEBUG: Updating PKGBUILD using dedicated script...\"
                echo \"DEBUG: SHA256 value: \$SHA256\"
                echo \"DEBUG: Original PKGBUILD sha256sums line:\"
                grep \"^sha256sums=\" packaging/arch/PKGBUILD || echo \"No sha256sums line found\"

                # Use dedicated script to avoid all shell escaping issues
                chmod +x scripts/build/update-pkgbuild.sh
                ./scripts/build/update-pkgbuild.sh \"\$VERSION\" \"\$SHA256\"

                echo \"DEBUG: Updated PKGBUILD sha256sums line:\"
                grep \"^sha256sums=\" packaging/arch/PKGBUILD || echo \"No sha256sums line found after update\"

                # Generate .SRCINFO from updated PKGBUILD
                echo \"Generating .SRCINFO...\"
                cd packaging/arch
                makepkg --printsrcinfo > .SRCINFO

                echo \"Arch package creation completed successfully\"
              '

              # Verify created files
              if [ ! -f /tmp/build/target/ziplock-*.tar.gz ]; then
                echo 'ERROR: Source archive was not created'
                ls -la /tmp/build/target/ || true
                exit 1
              fi

              if [ ! -f /tmp/build/packaging/arch/.SRCINFO ]; then
                echo 'ERROR: .SRCINFO was not created'
                ls -la /tmp/build/packaging/arch/ || true
                exit 1
              fi

              # Copy results back to workspace with correct ownership
              echo 'Copying build results back...'
              sudo cp /tmp/build/target/ziplock-*.tar.gz /workspace/target/ || {
                echo 'ERROR: Failed to copy Arch package'
                exit 1
              }
              sudo cp /tmp/build/packaging/arch/PKGBUILD /workspace/packaging/arch/ || {
                echo 'ERROR: Failed to copy PKGBUILD'
                exit 1
              }
              sudo cp /tmp/build/packaging/arch/.SRCINFO /workspace/packaging/arch/ || {
                echo 'ERROR: Failed to copy .SRCINFO'
                exit 1
              }

              # Restore original ownership
              sudo chown -R \$USER_ID:\$GROUP_ID /workspace

              echo 'Arch package creation completed successfully'
            "

          # Final verification of build results
          echo "Verifying Arch package build results..."
          if ! ls target/ziplock-*.tar.gz 1> /dev/null 2>&1; then
            echo "ERROR: Arch package tar.gz not found after build"
            echo "Contents of target directory:"
            ls -la target/ || true
            exit 1
          fi

          # Verify package integrity
          if ! tar -tzf target/ziplock-*.tar.gz > /dev/null; then
            echo "ERROR: Arch package tar.gz is corrupted"
            exit 1
          fi

          echo "Arch package build completed successfully"

      - name: Restore Git permissions after Docker
        run: |
          # Restore proper ownership for Git cleanup
          sudo chown -R $(id -u):$(id -g) .git/ || true
          chmod -R u+w .git/ || true

      - name: Upload Arch package
        uses: actions/upload-artifact@v4
        with:
          name: arch-package
          path: |
            target/ziplock-*.tar.gz
            packaging/arch/PKGBUILD
            packaging/arch/.SRCINFO
          retention-days: 30

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-22.04
    needs: [test-and-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-binaries
          path: target/x86_64-unknown-linux-gnu/release/

      - name: Run benchmarks
        run: |
          # Run any performance benchmarks (if they exist)
          cargo bench --workspace || echo "No benchmarks found"

          # Measure binary sizes from pre-built artifacts
          echo "## Binary Sizes" > benchmark-results.md
          echo "| Binary | Size |" >> benchmark-results.md
          echo "|--------|------|" >> benchmark-results.md
          echo "| ziplock | $(du -h target/x86_64-unknown-linux-gnu/release/ziplock | cut -f1) |" >> benchmark-results.md
          echo "| libziplock_shared.so | $(du -h target/x86_64-unknown-linux-gnu/release/libziplock_shared.so | cut -f1) |" >> benchmark-results.md

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.md
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: [package-debian, package-arch]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy Debian package
          cp artifacts/debian-package/*.deb release-assets/

          # Copy Arch package files
          cp artifacts/arch-package/*.tar.gz release-assets/
          cp artifacts/arch-package/PKGBUILD release-assets/

          # Copy compiled binaries
          mkdir -p release-assets/binaries
          cp artifacts/compiled-binaries/* release-assets/binaries/

          # Create tarball of binaries
          cd release-assets
          tar -czf ziplock-linux-x86_64.tar.gz binaries/
          rm -rf binaries

          ls -la release-assets/

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Extract changelog for version
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog section for this version
            awk "/^## \[?${{ steps.version.outputs.VERSION }}\]?/ {flag=1; next} /^## / {flag=0} flag" CHANGELOG.md > version-changelog.md
            if [ -s version-changelog.md ]; then
              echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
              cat version-changelog.md >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "CHANGELOG_CONTENT=No changelog found for this version." >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG_CONTENT=No changelog file found." >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "ZipLock v${{ steps.version.outputs.VERSION }}"
          body: |
            ## ZipLock v${{ steps.version.outputs.VERSION }}

            ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}

            ### Installation

            **Debian/Ubuntu:**
            ```bash
            wget https://github.com/ejangi/ziplock/releases/download/v${{ steps.version.outputs.VERSION }}/ziplock_${{ steps.version.outputs.VERSION }}_amd64.deb
            sudo dpkg -i ziplock_${{ steps.version.outputs.VERSION }}_amd64.deb
            sudo apt-get install -f  # Install any missing dependencies
            ```

            **Arch Linux:**
            ```bash
            yay -S ziplock
            ```

            **Manual Installation:**
            ```bash
            wget https://github.com/ejangi/ziplock/releases/download/v${{ steps.version.outputs.VERSION }}/ziplock-linux-x86_64.tar.gz
            tar -xzf ziplock-linux-x86_64.tar.gz
            sudo cp ziplock /usr/local/bin/
            sudo cp libziplock_shared.so /usr/local/lib/
            ```
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          files: |
            release-assets/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
