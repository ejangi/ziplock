package com.ziplock.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import android.content.Context
import com.ziplock.repository.MobileRepositoryManager
import com.ziplock.ffi.ZipLockMobileFFI
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.delay
import android.util.Log

/**
 * ViewModel for managing credential form state and operations
 * Updated to use unified architecture with MobileRepositoryManager
 */
class CredentialFormViewModel(context: Context) : ViewModel() {

    // Dependencies
    private val repositoryManager: MobileRepositoryManager = MobileRepositoryManager.getInstance(context)

    private val _uiState = MutableStateFlow(CredentialFormUiState())
    val uiState: StateFlow<CredentialFormUiState> = _uiState.asStateFlow()

    /**
     * Save a new credential
     */
    fun saveCredential(
        template: String, // Credential type as string
        title: String,
        fields: Map<String, String>,
        tags: List<String>,
        onSuccess: () -> Unit,
        onError: (String) -> Unit
    ) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                isSaving = true,
                errorMessage = null
            )

            try {
                // Add a small delay to show saving state
                delay(300)

                // Save credential using unified architecture
                println("CredentialFormViewModel: Attempting to save credential: $title")

                // Check if repository is open
                val repositoryState = repositoryManager.getRepositoryState()
                val isOpen = when (repositoryState) {
                    is MobileRepositoryManager.RepositoryResult.Success<*> -> {
                        val state = repositoryState.data as? MobileRepositoryManager.RepositoryState
                        state?.isOpen ?: false
                    }
                    else -> false
                }

                if (!isOpen) {
                    _uiState.value = _uiState.value.copy(
                        isSaving = false,
                        errorMessage = "No repository is open"
                    )
                    onError("No repository is open")
                    return@launch
                }

                // Create credential object from form data
                val currentTime = System.currentTimeMillis()
                val credential = ZipLockMobileFFI.CredentialRecord(
                    id = "", // Will be generated by FFI
                    title = title,
                    credentialType = template,
                    fields = fields.mapValues { (key, value) ->
                        ZipLockMobileFFI.CredentialField(
                            value = value,
                            fieldType = mapStringToFieldType(key),
                            sensitive = key.lowercase().contains("password") || key.lowercase().contains("secret"),
                            label = null,
                            metadata = emptyMap()
                        )
                    },
                    tags = tags,
                    notes = null,
                    createdAt = currentTime,
                    updatedAt = currentTime,
                    accessedAt = currentTime,
                    favorite = false,
                    folderPath = null
                )

                // Try to save using MobileRepositoryManager
                val result = repositoryManager.addCredential(credential)
                val success = result is MobileRepositoryManager.RepositoryResult.Success

                if (success) {
                    println("CredentialFormViewModel: Credential added to memory, now saving to archive...")

                    // Save the repository to persist changes to the archive file
                    val saveResult = repositoryManager.saveRepository()
                    val saveSuccess = saveResult is MobileRepositoryManager.RepositoryResult.Success

                    if (saveSuccess) {
                        _uiState.value = _uiState.value.copy(
                            isSaving = false,
                            errorMessage = null
                        )
                        println("CredentialFormViewModel: Successfully saved credential to archive: $title")
                        onSuccess()
                    } else {
                        val saveErrorMessage = when (saveResult) {
                            is MobileRepositoryManager.RepositoryResult.Error -> saveResult.message
                            else -> "Unknown error saving to archive"
                        }
                        _uiState.value = _uiState.value.copy(
                            isSaving = false,
                            errorMessage = "Credential saved to memory but failed to save to archive: $saveErrorMessage"
                        )
                        println("CredentialFormViewModel: Failed to save credential to archive: $saveErrorMessage")
                        onError(saveErrorMessage)
                    }
                } else {
                    val errorMessage = when (result) {
                        is MobileRepositoryManager.RepositoryResult.Error -> result.message
                        else -> "Unknown error"
                    }
                    _uiState.value = _uiState.value.copy(
                        isSaving = false,
                        errorMessage = errorMessage
                    )
                    println("CredentialFormViewModel: Failed to save credential: $errorMessage")
                    onError(errorMessage)
                }
            } catch (e: Exception) {
                println("CredentialFormViewModel: Exception saving credential: ${e.message}")
                e.printStackTrace()
                val errorMsg = "Error saving credential: ${e.message}"
                _uiState.value = _uiState.value.copy(
                    isSaving = false,
                    errorMessage = errorMsg
                )
                onError(errorMsg)
            }
        }
    }

    /**
     * Update an existing credential
     */
    fun updateCredential(
        credentialId: String,
        template: String, // Credential type as string
        title: String,
        fields: Map<String, String>,
        tags: List<String>,
        onSuccess: () -> Unit,
        onError: (String) -> Unit
    ) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(
                isSaving = true,
                errorMessage = null
            )

            try {
                // Add a small delay to show saving state
                delay(300)

                // Update credential using unified architecture
                println("CredentialFormViewModel: Attempting to update credential: $title")
                println("CredentialFormViewModel: Original credential ID: '$credentialId'")

                // Create updated credential object
                val currentTime = System.currentTimeMillis()

                // Let FFI handle ID generation if current ID is empty
                val finalCredentialId = if (credentialId.isEmpty()) {
                    println("CredentialFormViewModel: Empty ID detected, letting FFI generate new ID")
                    "" // FFI will generate a proper ID
                } else {
                    credentialId
                }

                val updatedCredential = ZipLockMobileFFI.CredentialRecord(
                    id = finalCredentialId,
                    title = title,
                    credentialType = template,
                    fields = fields.mapValues { (key, value) ->
                        ZipLockMobileFFI.CredentialField(
                            value = value,
                            fieldType = mapStringToFieldType(key),
                            sensitive = key.lowercase().contains("password") || key.lowercase().contains("secret"),
                            label = null,
                            metadata = emptyMap()
                        )
                    },
                    tags = tags,
                    notes = null,
                    createdAt = currentTime, // Keep original creation time in real implementation
                    updatedAt = currentTime,
                    accessedAt = currentTime,
                    favorite = false,
                    folderPath = null
                )

                println("CredentialFormViewModel: Calling repositoryManager.updateCredential with:")
                println("CredentialFormViewModel: - ID: '${updatedCredential.id}'")
                println("CredentialFormViewModel: - Title: '${updatedCredential.title}'")
                println("CredentialFormViewModel: - Fields: ${updatedCredential.fields.keys}")

                val result = repositoryManager.updateCredential(updatedCredential)
                val success = result is MobileRepositoryManager.RepositoryResult.Success

                println("CredentialFormViewModel: Update result - success: $success")
                when (result) {
                    is MobileRepositoryManager.RepositoryResult.Success -> {
                        println("CredentialFormViewModel: Update succeeded")
                    }
                    is MobileRepositoryManager.RepositoryResult.Error -> {
                        println("CredentialFormViewModel: Update failed with error: ${result.message}")
                    }
                }

                if (success) {
                    println("CredentialFormViewModel: Credential updated in memory, now saving to archive...")

                    // Save the repository to persist changes to the archive file
                    val saveResult = repositoryManager.saveRepository()
                    val saveSuccess = saveResult is MobileRepositoryManager.RepositoryResult.Success

                    if (saveSuccess) {
                        _uiState.value = _uiState.value.copy(
                            isSaving = false,
                            errorMessage = null
                        )
                        println("CredentialFormViewModel: Successfully updated credential in archive: $title")
                        onSuccess()
                    } else {
                        val saveErrorMessage = when (saveResult) {
                            is MobileRepositoryManager.RepositoryResult.Error -> saveResult.message
                            else -> "Unknown error saving to archive"
                        }
                        _uiState.value = _uiState.value.copy(
                            isSaving = false,
                            errorMessage = "Credential updated in memory but failed to save to archive: $saveErrorMessage"
                        )
                        println("CredentialFormViewModel: Failed to save updated credential to archive: $saveErrorMessage")
                        onError(saveErrorMessage)
                    }
                } else {
                    val errorMessage = when (result) {
                        is MobileRepositoryManager.RepositoryResult.Error -> result.message
                        else -> "Unknown error"
                    }
                    _uiState.value = _uiState.value.copy(
                        isSaving = false,
                        errorMessage = errorMessage
                    )
                    println("CredentialFormViewModel: Failed to update credential: $errorMessage")
                    onError(errorMessage)
                }
            } catch (e: Exception) {
                println("CredentialFormViewModel: Exception updating credential: ${e.message}")
                e.printStackTrace()
                val errorMsg = "Error updating credential: ${e.message}"
                _uiState.value = _uiState.value.copy(
                    isSaving = false,
                    errorMessage = errorMsg
                )
                onError(errorMsg)
            }
        }
    }

    /**
     * Validate form data before saving
     */
    fun validateForm(
        title: String,
        fields: Map<String, String>
    ): FormValidationResult {
        val errors = mutableListOf<String>()

        // Validate title
        if (title.isBlank()) {
            errors.add("Title is required")
        }

        // Basic field validation
        if (fields.isEmpty()) {
            errors.add("At least one field is required")
        }

        return FormValidationResult(
            isValid = errors.isEmpty(),
            errors = errors
        )
    }









    /**
     * Clear any error messages
     */
    fun clearError() {
        _uiState.value = _uiState.value.copy(errorMessage = null)
    }

    /**
     * Reset form state
     */
    fun resetForm() {
        _uiState.value = CredentialFormUiState()
    }

    /**
     * Check if archive is open and ready for operations
     */
    suspend fun isArchiveOpen(): Boolean {
        return try {
            val repositoryState = repositoryManager.getRepositoryState()
            when (repositoryState) {
                is MobileRepositoryManager.RepositoryResult.Success<*> -> {
                    val state = repositoryState.data as? MobileRepositoryManager.RepositoryState
                    state?.isOpen ?: false
                }
                else -> false
            }
        } catch (e: Exception) {
            println("CredentialFormViewModel: Error checking archive status: ${e.message}")
            false
        }
    }

    /**
     * Map string field type to FieldType enum
     */
    private fun mapStringToFieldType(fieldType: String): ZipLockMobileFFI.FieldType {
        return when (fieldType.lowercase()) {
            "password" -> ZipLockMobileFFI.FieldType.Password
            "email" -> ZipLockMobileFFI.FieldType.Email
            "url", "website" -> ZipLockMobileFFI.FieldType.Url
            "username", "user", "login" -> ZipLockMobileFFI.FieldType.Username
            "phone", "telephone" -> ZipLockMobileFFI.FieldType.Phone
            "credit_card", "creditcard", "card_number" -> ZipLockMobileFFI.FieldType.CreditCardNumber
            "expiry", "expiry_date", "expiration" -> ZipLockMobileFFI.FieldType.ExpiryDate
            "cvv", "cvc", "security_code" -> ZipLockMobileFFI.FieldType.Cvv
            "totp", "totp_secret", "2fa" -> ZipLockMobileFFI.FieldType.TotpSecret
            "notes", "description", "comment" -> ZipLockMobileFFI.FieldType.TextArea
            "number", "numeric" -> ZipLockMobileFFI.FieldType.Number
            else -> ZipLockMobileFFI.FieldType.Text
        }
    }
}

/**
 * UI state for credential form
 */
data class CredentialFormUiState(
    val isSaving: Boolean = false,
    val errorMessage: String? = null
) {
    val hasError: Boolean
        get() = errorMessage != null
}

/**
 * Form validation result
 */
data class FormValidationResult(
    val isValid: Boolean,
    val errors: List<String> = emptyList()
)

/**
 * Operation result for save/update operations
 */
data class OperationResult(
    val success: Boolean,
    val errorMessage: String? = null
)
